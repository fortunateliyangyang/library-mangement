<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.book.librarymangement.dao.StudentDao">
  <resultMap id="BaseResultMap" type="com.book.librarymangement.entity.Student">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="year" jdbcType="INTEGER" property="year" />
    <result column="classes" jdbcType="VARCHAR" property="classes" />
    <result column="faculty" jdbcType="TINYINT" property="faculty" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="head_sulpture" jdbcType="VARCHAR" property="headSulpture" />
    <result column="personality_word" jdbcType="VARCHAR" property="personalityWord" />
    <result column="birth" jdbcType="VARCHAR" property="birth" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="telePhone" jdbcType="VARCHAR" property="telephone" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`, `password`, `year`, classes, faculty, sex, nick_name, head_sulpture, 
    personality_word, birth, email, telePhone
  </sql>
  <select id="selectByExample" parameterType="com.book.librarymangement.entity.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from student
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.book.librarymangement.entity.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.book.librarymangement.entity.Student" useGeneratedKeys="true">
    insert into student (`name`, `password`, `year`, 
      classes, faculty, sex, 
      nick_name, head_sulpture, personality_word, 
      birth, email, telePhone
      )
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{year,jdbcType=INTEGER}, 
      #{classes,jdbcType=VARCHAR}, #{faculty,jdbcType=TINYINT}, #{sex,jdbcType=VARCHAR}, 
      #{nickName,jdbcType=VARCHAR}, #{headSulpture,jdbcType=VARCHAR}, #{personalityWord,jdbcType=VARCHAR}, 
      #{birth,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.book.librarymangement.entity.Student" useGeneratedKeys="true">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="year != null">
        `year`,
      </if>
      <if test="classes != null">
        classes,
      </if>
      <if test="faculty != null">
        faculty,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="headSulpture != null">
        head_sulpture,
      </if>
      <if test="personalityWord != null">
        personality_word,
      </if>
      <if test="birth != null">
        birth,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="telephone != null">
        telePhone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        #{year,jdbcType=INTEGER},
      </if>
      <if test="classes != null">
        #{classes,jdbcType=VARCHAR},
      </if>
      <if test="faculty != null">
        #{faculty,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="headSulpture != null">
        #{headSulpture,jdbcType=VARCHAR},
      </if>
      <if test="personalityWord != null">
        #{personalityWord,jdbcType=VARCHAR},
      </if>
      <if test="birth != null">
        #{birth,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        #{telephone,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.book.librarymangement.entity.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.year != null">
        `year` = #{record.year,jdbcType=INTEGER},
      </if>
      <if test="record.classes != null">
        classes = #{record.classes,jdbcType=VARCHAR},
      </if>
      <if test="record.faculty != null">
        faculty = #{record.faculty,jdbcType=TINYINT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.nickName != null">
        nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.headSulpture != null">
        head_sulpture = #{record.headSulpture,jdbcType=VARCHAR},
      </if>
      <if test="record.personalityWord != null">
        personality_word = #{record.personalityWord,jdbcType=VARCHAR},
      </if>
      <if test="record.birth != null">
        birth = #{record.birth,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.telephone != null">
        telePhone = #{record.telephone,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set id = #{record.id,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      `year` = #{record.year,jdbcType=INTEGER},
      classes = #{record.classes,jdbcType=VARCHAR},
      faculty = #{record.faculty,jdbcType=TINYINT},
      sex = #{record.sex,jdbcType=VARCHAR},
      nick_name = #{record.nickName,jdbcType=VARCHAR},
      head_sulpture = #{record.headSulpture,jdbcType=VARCHAR},
      personality_word = #{record.personalityWord,jdbcType=VARCHAR},
      birth = #{record.birth,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      telePhone = #{record.telephone,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.book.librarymangement.entity.Student">
    update student
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        `year` = #{year,jdbcType=INTEGER},
      </if>
      <if test="classes != null">
        classes = #{classes,jdbcType=VARCHAR},
      </if>
      <if test="faculty != null">
        faculty = #{faculty,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="headSulpture != null">
        head_sulpture = #{headSulpture,jdbcType=VARCHAR},
      </if>
      <if test="personalityWord != null">
        personality_word = #{personalityWord,jdbcType=VARCHAR},
      </if>
      <if test="birth != null">
        birth = #{birth,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        telePhone = #{telephone,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.book.librarymangement.entity.Student">
    update student
    set `name` = #{name,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `year` = #{year,jdbcType=INTEGER},
      classes = #{classes,jdbcType=VARCHAR},
      faculty = #{faculty,jdbcType=TINYINT},
      sex = #{sex,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      head_sulpture = #{headSulpture,jdbcType=VARCHAR},
      personality_word = #{personalityWord,jdbcType=VARCHAR},
      birth = #{birth,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      telePhone = #{telephone,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>